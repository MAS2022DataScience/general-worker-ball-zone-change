topic:
  general-01:
    name: general_01_player_ball
    replication-factor: 2
    partitions: 3
  general-02:
    name: general_05_ball_zone_change
    replication-factor: 2
    partitions: 3
  general-match-team:
    name: general_match_team
    replication-factor: 2
    partitions: 3
  general-match-phase:
    name: general_match_phase
    replication-factor: 2
    partitions: 3

spring:
  application:
    name: "general-worker-ball-zone-change"

  kafka:
    bootstrap-servers:
      - kafka-1:19092
      - kafka-2:19093
#      - ${DATAPLATFORM_IP}:9092
#      - ${DATAPLATFORM_IP}:9093
    streams:
      application-id: ${spring.application.name}
      client-id: ${spring.application.name}-stream
      replication-factor: 2
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      # This is the default: log, fail and stop processing records (stop stream)
      #default.deserialization.exception.handler: org.apache.kafka.streams.errors.LogAndContinueExceptionHandler
      default.deserialization.exception.handler: org.apache.kafka.streams.errors.LogAndFailExceptionHandler
      properties:
        #commit.interval.ms: 100
        #group-id: <group_id> #this shows up in KafkaStreamsConfiguration
        default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
        default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
    properties:
      schema.registry.url: "http://schema-registry-1:8081"
#      schema.registry.url: "http://${DATAPLATFORM_IP}:8081"
    # At application startup a missing topic on the broker will not fail the
    # application startup
    listener:
      missing-topics-fatal: false
